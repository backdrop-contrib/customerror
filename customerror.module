<?php

//$Id$

// Copyright 2005 Khalid Baheyeldin http://2bits.com


/**
 * @file
 * Enables custom 404 (not found) and 403 (access denied) pages in Drupal
 * with no need for creating real nodes under taxonomies
 */

function _customerror_enum_errors() {
  // This is where the error codes and their default descriptions are
  // stored. Add here as necessary.
  $errors = array(
    404 => t('requested page not found'),
    403 => t('access denied')
    );

  return $errors;
}

function _customerror_fetch_error($error_code) {
  $errors = _customerror_enum_errors();

  $default_desc = t('unknown error: ') . $error_code;

  $r = $default_desc;

  foreach ($errors as $code => $desc) {
    if ($error_code == $code) {
      $r = $desc;
    }
  }
  return $r;
}

/**
 * Implementation of hook_help().
 */
function customerror_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Enables the creation of custom error pages for 404 and 403 errors.');
      break;
    case 'admin/settings/customerr':
      $output = t('Enables the creation of custom error pages for 404 and 403 errors.');
      break;
  }
  return $output;
}

function customerror_settings()
{
  $form = array(
    'customerror_form_description' => array(
      '#type' => 'markup',
      '#value' => t('<p>Enter the error pages that will be seen by your visitors when they get the respective errors. You can enter any HTML text. You can point the users to the FAQ, inform them that you reorganized the site, ask them to report the error, login or register, ...etc.</p>')
    )
  );

  $errors = _customerror_enum_errors();
  foreach($errors as $error_code => $error_desc) {
    $form['customerror_' . $error_code . '_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title for ') . $error_code,
      '#default_value' => variable_get('customerror_' . $error_code . '_title', $error_desc),
      '#size' => 70,
      '#maxlength' => 70,
      '#description' => t('Title of ' . $error_code . ' error page')
    );
    $form['customerror_' . $error_code] = array(
      '#type' => 'textarea',
      '#title' => t('Description for ') . $error_code,
      '#default_value' => variable_get('customerror_' . $error_code, $error_desc),
      '#rows' => 10,
      '#description' => t('This text will be displayed if a ' . $error_code . '('. $error_desc . ') error occurs.')
    );
  }

  return $form;
}

function customerror_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'title'    => t('customerror'),
      'path'     => 'customerror',
      'access'   => TRUE,
      'callback' => 'customerror_page',
      'type'     => MENU_CALLBACK,
      'weight'   => 0 );
    }

  return $items;
}
/**
 * Implementation of hook_page().
 */
function customerror_page() {

  $error = arg(1);

  switch($error) {
    case 403:
    case 404:
      drupal_set_title(variable_get('customerror_'. $error .'_title',
        _customerror_fetch_error($error)));
      $body = theme('customerror_' . $error,
        variable_get('customerror_' . $error, _customerror_fetch_error($error)));
      break;
    default:
      drupal_set_title(t('undefined error: ') . $error);
      $body = _customerror_fetch_error($error);
      break;
  }
  print theme('page', $body);
}

/**
 * Themeable function of the 403-Site
 */
function theme_customerror_403($content) {
  return $content;
}

/**
 * Themeable function of the 404-Site
 */
function theme_customerror_404($content) {
  return $content;
}
 
function customerror_user($op, $edit, $user) {
  switch($op) {
    case 'login':
      // Check if we have a destination saved in the session
      $destination = $_SESSION['destination'];
      if ($destination) {
        // If there is one, then set the REQUEST destination to it
        $_REQUEST['destination'] = $destination;
        // And clear the one in the session
        unset($_SESSION['destination']);
        // user.module then does a drupal_goto() for us after we return from here
      }
  }
}
